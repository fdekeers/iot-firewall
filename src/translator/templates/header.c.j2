{% set policy_jinja = policy.replace('-', '_') %}
{% set is_dns = namespace(value=False) %}
// THIS FILE HAS BEEN AUTOGENERATED. DO NOT EDIT.

/**
 * Nefilter queue for device {{device}} and policy {{policy_jinja}}
 */

// Standard libraries
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
{% if max_threads > 1 %}
#include <pthread.h>
#include <assert.h>
{% endif %}
// Custom libraries
#include "nfqueue.h"
#include "packet_utils.h"
#include "rule_utils.h"
// Parsers
#include "parsers/header.h"
{% for parser in custom_parsers %}
{% if "dns" in parser %}
#include "parsers/dns.h"
{% else %}
#include "parsers/{{parser}}.h"
{% endif %}
{% endfor %}

// Constants
{% if max_threads > 1 %}
#define MAX_THREADS {{max_threads}}
{% if "packet-count" in max_counters and max_counters["packet-count"] > 0 %}
#define MAX_PACKET_COUNTERS {{max_counters["packet-count"]}}
{% endif %}
{% if "duration" in max_counters and max_counters["duration"] > 0 %}
#define MAX_DURATION_COUNTERS {{max_counters["duration"]}}
{% endif %}
{% endif %}
#define NUM_STATES  {{states|length}}
#define NFQ_ID_BASE {{nfq_id_base}}

{% if states|length > 1 %}
typedef enum {
{% for state in states %}
    {{state}},
{% endfor %}
} state_t;

state_t state = {{states[0]}};
{% endif %}
{% if max_threads > 1 %}
uint8_t num_threads = 0;
pthread_mutex_t mutex;
{% if "packet-count" in max_counters and max_counters["packet-count"] > 0 %}
packet_count_t packet_count_init[MAX_PACKET_COUNTERS];
{% endif %}
{% if "duration" in max_counters and max_counters["duration"] > 0 %}
duration_t duration_init[MAX_DURATION_COUNTERS];
{% endif %}
{% else %}
{% if "packet-count" in max_counters and max_counters["packet-count"] > 0 %}
packet_count_t packet_count_init;
{% endif %}
{% if "duration" in max_counters and max_counters["duration"] > 0 %}
duration_t duration_init;
{% endif %}
{% endif %}
{% if "dns" in custom_parsers or "mdns" in custom_parsers %}
dns_map_t *dns_map;  // Domain name to IP address mapping
{% endif %}

