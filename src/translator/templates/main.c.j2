

/**
 * @brief Program entry point
 * 
 * @param argc number of command line arguments
 * @param argv list of command line arguments
 * @return exit code, 0 if success
 */
int main(int argc, char const *argv[]) {
    {% if multithread %}
    // Initialize state mutex
    int ret = pthread_mutex_init(&mutex, NULL);
    assert(ret == 0);

    // Create threads
    uint8_t i = 0;
    pthread_t threads[MAX_THREADS];

    {% for policy in policies %}
    {% if not policy.periodic %}
    {% set policy_jinja = policy.name.replace('-', '_') %}
    // {{policy_jinja}}
    thread_arg_t thread_arg_{{policy_jinja}} = {
        .queue_id = NFQ_ID_BASE + i,
        .func = &callback_{{policy_jinja}},
        .arg = NULL
    };
    ret = pthread_create(&threads[i++], NULL, nfqueue_thread, (void *) &thread_arg_{{policy_jinja}});
    assert(ret == 0);
    
    {% endif %}
    {% endfor %}
    // Wait forever for threads
    for (i = 0; i < MAX_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy mutex
    pthread_mutex_destroy(&mutex);
    {% else %}
    // Bind to netfilter queue
    bind_queue(NFQ_ID_BASE, &callback_{{policies[0].name.replace('-', '_')}}, NULL);
    {% endif %}

    return 0;
}
