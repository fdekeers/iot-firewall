{% macro write_callbck_function(loop_index, is_backward=False) %}
{% set policy = policies[loop_index - 1] %}
{% set policy_name = policy.name.replace("-", "_") %}
{% set for_or_back = "backward" if is_backward else "forward" %}
{% set policy_jinja = "{}_backward".format(policy_name) if is_backward else policy_name %}
/**
 * @brief {{policy_jinja}} callback function, called when a packet enters the queue.
 * 
 * @param pkt_id packet ID for netfilter queue
 * @param pkt_len packet length, in bytes
 * @param payload pointer to the packet payload
 * @param arg pointer to the argument passed to the callback function
 * @return the verdict for the packet
 */
uint32_t callback_{{policy_jinja}}(int pkt_id, int pkt_len, uint8_t *payload, void *arg) {
    printf("Received packet\n");
    {% if multithread and policy.counters %}
    // Get counters ID from thread argument
    counters_id_t *counters_id = (counters_id_t *) arg;
    {% if "packet-count" in policy.counters %}
    uint8_t packet_counter_id = counters_id->packet_counter_id;
    {% endif %}
    {% if "duration" in policy.counters %}
    uint8_t duration_counter_id = counters_id->duration_counter_id;
    {% endif %}
    {% endif %}
    {% if policy.custom_parser == 'ssdp' %}
    uint32_t dst_addr = get_ipv4_dst_addr(payload);  // IPv4 destination address, in network byte order
    {% endif %}
    {% if policy.custom_parser and policy.nfq_matches %}
    // Skip layer 3 and 4 headers
    {% if policy.custom_parser == 'http' or policy.custom_parser == 'coap' %}
    size_t l3_header_length = get_l3_header_length(payload);
    {% if policy.custom_parser == 'http' %}
    uint16_t dst_port = get_dst_port(payload + l3_header_length);
    {% elif policy.custom_parser == 'coap' %}
    uint16_t coap_length = get_udp_payload_length(payload + l3_header_length);
    {% endif %}
    {% endif %}
    size_t skipped = get_headers_length(payload);
    {% if policy.custom_parser == 'http' %}
    bool has_payload = pkt_len - skipped >= HTTP_MESSAGE_MIN_LEN;
    {% endif %}

    {% if "dns" in policy.custom_parser %}
    // Parse DNS message
    dns_message_t message = dns_parse_message(payload + skipped);
    dns_print_message(message);
    {% elif policy.custom_parser %}
    // Parse message
    {{policy.custom_parser}}_message_t message = {{policy.custom_parser}}_parse_message(payload + skipped
    {%- if policy.custom_parser == 'http' -%}
    , dst_port
    {%- elif policy.custom_parser == 'ssdp' -%}
    , dst_addr
    {%- elif policy.custom_parser == 'coap' -%}
    , coap_length
    {%- endif -%}
    );
    {{policy.custom_parser}}_print_message(message);
    {% endif %}
    {% endif %}
    uint32_t verdict = NF_ACCEPT;

    {% if multithread %}
    {% set direction = "in" if is_backward else "out" %}
    {% if policy.transient and "packet-count" in policy.counters and ( ( "default" in policy.counters["packet-count"] and not is_backward ) or direction in policy.counters["packet-count"] ) %}
    // Initialize packet count initial values if not initialized yet
    if (!packet_count_init[packet_counter_id].is_initialized) {
        {% if "default" in policy.counters["packet-count"] and not is_backward %}
        packet_count_init[packet_counter_id] = counter_packets_init("{{nft_table}}", "{{policy.name}}", BOTH);
        {% elif direction in policy.counters["packet-count"] %}
        packet_count_init[packet_counter_id] = counter_packets_init("{{nft_table}}", "{{policy.name}}-{{direction}}", {{direction|upper}});
        {% endif %}
    }
    {% endif %}
    {% if policy.transient and "duration" in policy.counters and ( ( "default" in policy.counters["duration"] and not is_backward ) or direction in policy.counters["duration"] ) %}
    // Initialize duration initial value if not initialized yet
    if (!duration_init[duration_counter_id].is_initialized) {
        duration_init[duration_counter_id] = counter_duration_init();
    }
    {% endif %}

    // Custom match
    {% if policy.nfq_matches %}
    if (
        {% if policy.custom_parser == 'http' %}
        !has_payload || (
        {% endif %}
        {% if policy.nfq_matches %}
        {% set rule = policy.nfq_matches[0][for_or_back] %}
        {% if rule['match'] | is_list %}
        {{ rule['template'].format(*(rule['match'])) }}
        {% else %}
        {{ rule['template'].format((rule['match'])) }}
        {% endif %}
        {% for match in policy.nfq_matches[1:] %}
        {% if for_or_back in match %}
        {% set rule = match[for_or_back] %}
        {% if rule['match'] | is_list %}
        && {{ rule['template'].format(*(rule['match'])) }}
        {% else %}
        && {{ rule['template'].format((rule['match'])) }}
        {% endif %}
        {% endif %}
        {% endfor %}
        {% endif %}
        {% if policy.custom_parser == 'http' %}
        )
        {% endif %}
    ) {
    {% endif %}
        pthread_mutex_lock(&mutex);
        {% set previous_policy = policies[(loop_index - 2) % policies|length] %}
        {% set state_index = current_state.value - 1 if is_backward and policy.transient else current_state.value %}
        if (state == {{states[state_index]}}
        {%- if previous_policy.transient %} || state == {{states[state_index - 1]}} {%- endif -%}
        ) {
            {% if not policy.periodic and not policy.transient %}
            {% set current_state.value = current_state.value if is_backward and policy.transient else (current_state.value + 1) % states|length %}
            state = {{states[current_state.value]}};
            {% endif %}
            {% if policy.transient %}
            if (
                {% set direction = "in" if is_backward else "out" %}
                {% if "packet-count" in policy.counters and "default" in policy.counters["packet-count"] %}
                counter_read_packets("{{nft_table}}", "{{policy.name}}") - packet_count_init[packet_counter_id].packets_both >= {{policy.counters["packet-count"]["default"]}}
                {% elif "packet-count" in policy.counters and direction in policy.counters["packet-count"] %}
                counter_read_packets("{{nft_table}}", "{{policy.name}}-{{direction}}") - packet_count_init[packet_counter_id].packets_{{direction}} >= {{policy.counters["packet-count"][direction]}}
                {% endif %}
                {% if policy.counters|length > 1 %}
                && {% endif -%}
                {%- if "duration" in policy.counters and "default" in policy.counters["duration"] -%}
                counter_read_microseconds() - duration_init[duration_counter_id].microseconds >= {{policy.counters["duration"]["default"]}}
                {% elif "duration" in policy.counters and direction in policy.counters["duration"] %}
                counter_read_microseconds() - duration_init[duration_counter_id].microseconds >= {{policy.counters["duration"][direction]}}
                {% endif %}
            ) {
                {% set current_state.value = current_state.value if is_backward and policy.transient else (current_state.value + 1) % states|length %}
                state = {{states[current_state.value]}};
                {% if "packet-count" in policy.counters %}
                packet_count_init[packet_counter_id].is_initialized = false;
                {% endif %}
                {% if "duration" in policy.counters %}
                duration_init[duration_counter_id].is_initialized = false;
                {% endif %}
            }
            {% endif %}
            pthread_mutex_unlock(&mutex);
            {% set previous_policy = policies[(loop_index - 2) % policies|length] %}
            {% if previous_policy.periodic %}
            {% set previous_rules = previous_policy.build_nft_rule(-1) %}
            {% set previous_rule_forward = previous_rules['forward'].replace("\"", "\'") %}
            delete_nft_rule("{{nft_table}}", "{{nft_chain}}", "{{previous_rule_forward}}");
            {% if 'backward' in previous_rules %}
            {% set previous_rule_backward = previous_rules['backward'].replace("\"", "\'") %}
            delete_nft_rule("{{nft_table}}", "{{nft_chain}}", "{{previous_rule_backward}}");
            {% endif %}
            {% endif %}
            {% set next_policy = policies[loop_index % policies|length] %}
            {% if next_policy.periodic and (policy.transient != is_backward) %}
            {% set next_rules = next_policy.build_nft_rule(-1) %}
            // Add nftables rule for next match
            {% set next_rule_forward = next_rules['forward'].replace("\"", "\'") %}
            system("sudo nft add rule {{nft_table}} {{nft_chain}} {{next_rule_forward}}");
            {% if 'backward' in next_rules %}
            {% set next_rule_backward = next_rules['backward'].replace("\"", "\'") %}
            system("sudo nft add rule {{nft_table}} {{nft_chain}} {{next_rule_backward}}");
            {% endif %}
            {% endif %}
            {% if "dns" in policy.custom_parser %}
            {% set is_response = namespace(value=False) %}
            {% for nfq_match in policy.nfq_matches %}
            {% if "message.header.qr == " in nfq_match[for_or_back]["template"] and nfq_match[for_or_back]["match"] == 1 %}
            {% set is_response.value = True %}
            {% endif %}
            {% if is_response.value and "domain_name" in nfq_match[for_or_back]["template"] %}
            {% set domain_name = nfq_match[for_or_back]["match"] %}
            ip_list_t ip_list = dns_get_ip_from_name(message.answers, message.header.ancount, "{{domain_name}}");
            dns_map_add(dns_map, "{{domain_name}}", ip_list);
            {% endif %}
            {% endfor %}
            {% endif %}
            verdict = NF_ACCEPT;
            printf("Accept: policy {{policy.name}}, backward = {{is_backward}}, state = {{states[state_index]}}\n");
        } else {
            pthread_mutex_unlock(&mutex);
        }
    {% if policy.nfq_matches %}
    }
    {% endif %}
    {% else %}
    {% set direction = "in" if is_backward else "out" %}
    {% if policy.transient and "packet-count" in policy.counters and ( ( "default" in policy.counters["packet-count"] and not is_backward ) or direction in policy.counters["packet-count"] ) %}
    // Initialize packet count initial values if not initialized yet
    if (!packet_count_init.is_initialized) {
        {% if "default" in policy.counters["packet-count"] and not is_backward %}
        packet_count_init = counter_packets_init("{{nft_table}}", "{{policy.name}}", BOTH);
        {% elif direction in policy.counters["packet-count"] %}
        packet_count_init = counter_packets_init("{{nft_table}}", "{{policy.name}}-{{direction}}", {{direction|upper}});
        {% endif %}
    }
    {% endif %}
    {% if policy.transient and "duration" in policy.counters and ( ( "default" in policy.counters["duration"] and not is_backward ) or direction in policy.counters["duration"] ) %}
    // Initialize duration initial value if not initialized yet
    if (!duration_init.is_initialized) {
        duration_init = counter_duration_init();
    }
    {% endif %}

    // Custom match
    if (
        {% if policy.custom_parser == 'http' %}
        !has_payload || (
        {% endif %}
        {% if states|length > 1 %}
        {% set previous_policy = policies[(loop_index - 2) % policies|length] %}
        {% set state_index = current_state.value - 1 if is_backward and policy.transient else current_state.value %}
        {% if previous_policy.transient %}
        ( {% endif %}
        state == {{states[state_index]}}
        {% if previous_policy.transient %} || state == {{states[state_index - 1]}} )
        {% endif %}
        {% endif %}
        {% for match in policy.nfq_matches %}
        {% if for_or_back in match %}
        {% set rule = match[for_or_back] %}
        {% if rule['match'] | is_list %}
        {{ rule['template'].format(*(rule['match'])) }}
        {% else %}
        {{ rule['template'].format((rule['match'])) }}
        {% endif %}
        {% endif %}
        {%- if loop.index < policy.nfq_matches|length or policy.counters %} &&
        {% endif %}
        {% endfor %}
        {% set direction = "in" if is_backward else "out" %}
        {% if "packet-count" in policy.counters and "default" in policy.counters["packet-count"] %}
        counter_read_packets("{{nft_table}}", "{{policy.name}}") - packet_count_init.packets_both >= {{policy.counters["packet-count"]["default"]}}
        {%- if "duration" in policy.counters %} &&
        {% endif %}
        {% elif "packet-count" in policy.counters and direction in policy.counters["packet-count"] -%}
        counter_read_packets("{{nft_table}}", "{{policy.name}}") - packet_count.packets_{{direction}} >= {{policy.counters["packet-count"][direction]}}
        {% endif %}
        {% if "duration" in policy.counters and "default" in policy.counters["duration"] %}
        counter_read_microseconds() - duration_init.microseconds >= {{policy.counters["duration"]["default"]}}
        {% elif "duration" in policy.counters and direction in policy.counters["duration"] %}
        counter_read_microseconds() - duration_init.microseconds >= {{policy.counters["duration"][direction]}}
        {% endif %}
        {% if policy.custom_parser == 'http' %}
        )
        {% endif %}
    ) {
        {% if states|length > 1 %}
        {% set current_state.value = current_state.value if is_backward and policy.transient else (current_state.value + 1) % states|length %}
        {% if not policy.periodic and not policy.transient %}
        state = {{states[current_state.value]}};
        {% if policy.transient %}
        {% if "packet-count" in policy.counters %}
        packet_count_init.is_initialized = false;
        {% endif %}
        {% if "duration" in policy.counters %}
        duration_init.is_initialized = false;
        {% endif %}
        {% endif %}
        {% endif %}
        {% endif %}
        {% if policies|length > 1 %}
        {% set previous_policy = policies[(loop_index - 2) % policies|length] %}
        {% if previous_policy.periodic %}
        {% set previous_rules = previous_policy.build_nft_rule(-1) %}
        {% set previous_rule_forward = previous_rules['forward'].replace("\"", "\'") %}
        delete_nft_rule("{{nft_table}}", "{{nft_chain}}", "{{previous_rule_forward}}");
        {% if 'backward' in previous_rules %}
        {% set previous_rule_backward = previous_rules['backward'].replace("\"", "\'") %}
        delete_nft_rule("{{nft_table}}", "{{nft_chain}}", "{{previous_rule_backward}}");
        {% endif %}
        {% endif %}
        {% set next_policy = policies[loop_index % policies|length] %}
        {% if next_policy.periodic and (policy.transient != is_backward) %}
        {% set next_rules = next_policy.build_nft_rule(-1) %}
        {% set next_rule_forward = next_rules['forward'].replace("\"", "\'") %}
        system("sudo nft add rule {{nft_table}} {{nft_chain}} {{next_rule_forward}}");
        {% if 'backward' in next_rules %}
        {% set next_rule_backward = next_rules['backward'].replace("\"", "\'") %}
        system("sudo nft add rule {{nft_table}} {{nft_chain}} {{next_rule_backward}}");
        {% endif %}
        {% endif %}
        {% endif %}
        {% if "dns" in policy.custom_parser %}
        {% set is_response = namespace(value=False) %}
        {% for nfq_match in nfq_matches %}
        {% set is_response.value = "message.header.qr == " in nfq_match[for_or_back]["template"] and nfq_match[for_or_back]["match"] == 1 %}
        {% if is_response.value and "domain_name" in nfq_match[for_or_back]["template"] %}
        {% set domain_name = nfq_match[for_or_back]["match"] %}
        ip_list_t ip_list = dns_get_ip_from_name(message.answers, message.header.ancount, "{{domain_name}}");
        dns_map_add(dns_map, "{{domain_name}}", ip_list);
        {% endif %}
        {% endfor %}
        {% endif %}
        verdict = NF_ACCEPT;
        printf("Accept: policy {{policy.name}}, backward = {{is_backward}}, state = {{current_state.value}}\n");
    }
    {% endif %}

    {% if policy.custom_parser %}
    {% if "dns" in policy.custom_parser %}
    dns_free_message(message);
    {% elif policy.custom_parser != "ssdp" %}
    {{policy.custom_parser}}_free_message(message);
    {% endif %}
    {% endif %}
    return verdict;
}
{% endmacro %}

{% set current_state = namespace(value=0) %}
{% for policy in policies %}
{% if not policy.periodic %}

{{ write_callbck_function(loop.index) }}

{% if policy.direction == "both" %}
{{ write_callbck_function(loop.index, True) }}
{% endif %}

{% endif %}
{% endfor %}
