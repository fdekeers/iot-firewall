

/**
 * @brief {{policy}} callback function, called when a packet enters the queue.
 * 
 * @param pkt_id packet ID for netfilter queue
 * @param payload pointer to the packet payload
 * @param arg pointer to the argument passed to the callback function
 * @return the verdict for the packet
 */
uint32_t callback_{{policy}}(int pkt_id, uint8_t *payload, void *arg) {
    printf("Received packet\n");
    // Skip layer 3 and 4 headers
    size_t skipped = get_ip_header_length(payload);
    {% if custom_parsers[current_state] == 'http' %}
    uint16_t src_port = get_src_port(payload + skipped);
    {% endif %}
    skipped += get_tcp_header_length(payload + skipped);

    // Parse message
    {{custom_parsers[current_state]}}_message_t message = {{custom_parsers[current_state]}}_parse_message(payload + skipped
    {%- if custom_parsers[current_state] == 'http' -%}
    , src_port
    {%- endif -%}
    );
    {{custom_parsers[current_state]}}_print_message(message);
    uint32_t verdict = NF_DROP;

    // Custom match
    if (
        {{nfq[0]["forward"]}}
        {% for match in nfq[1:] %}
        && {{match["forward"]}}
        {% endfor %}
    ) {
        {% if multithread %}
        pthread_mutex_lock(&mutex);
        {% endif %}
        if (state == {{states[current_state]}}) {
            state = {{states[(current_state + 1) % states|length]}};
            {% if multithread %}
            pthread_mutex_unlock(&mutex);
            {% endif %}
            verdict = NF_ACCEPT;
        }
        {% if multithread %}
        else {
            pthread_mutex_unlock(&mutex);
        }
        {% endif %}
    {% if direction == "both" %}
    } else if (
        {{nfq[0]["backward"]}}
        {% for match in nfq[1:] %}
        {% if "backward" in match %}
        && {{match["backward"]}}
        {% endif %}
        {% endfor %}
    ) {
        {% if multithread %}
        pthread_mutex_lock(&mutex);
        {% endif %}
        if (state == {{states[(current_state + 1) % states|length]}}) {
            state = {{states[(current_state + 2) % states|length]}};
            {% if multithread %}
            pthread_mutex_unlock(&mutex);
            {% endif %}
            verdict = NF_ACCEPT;
        }
        {% if multithread %}
        else {
            pthread_mutex_unlock(&mutex);
        }
        {% endif %}
    {% endif %}
    }

    return verdict;
}

